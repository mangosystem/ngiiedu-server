<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.go.ngii.edu.main.board.mapper.BoardMapper">

	<resultMap type="kr.go.ngii.edu.main.board.model.BbsNotice" id="bbsNotice">
		<id property="idx" column="idx" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="writer" column="writer" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
	</resultMap>
	
	<resultMap type="kr.go.ngii.edu.main.board.model.BbsQuestion" id="bbsQuestion">
		<id property="idx" column="idx" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="writer" column="writer" />
		<result property="userId" column="user_id" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
		<result property="attach" column="attach" />
		<result property="commentCount" column="comment_count" />
	</resultMap>
	
	<resultMap type="kr.go.ngii.edu.main.board.model.BbsFAQuestion" id="bbsFAQuestion">
		<id property="idx" column="idx" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="writer" column="writer" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
		<result property="attach" column="attach" />
	</resultMap>
	
	<resultMap type="kr.go.ngii.edu.main.board.model.BbsReply" id="bbsReply">
		<id property="idx" column="idx" />
		<result property="qnaId" column="qna_id" />
		<result property="description" column="description" />
		<result property="writer" column="writer" />
		<result property="userId" column="user_id" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
	</resultMap>
	
	<resultMap type="kr.go.ngii.edu.main.board.model.BbsPds" id="bbsPds">
		<id property="idx" column="idx" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="writer" column="writer" />
		<result property="userId" column="user_id" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
		<result property="attach" column="attach" />
	</resultMap>

	<resultMap type="kr.go.ngii.edu.main.board.model.BbsPdsFile" id="bbsPdsFile">
		<id property="idx" column="idx" />
		<result property="pdsId" column="pdsId" />
		<result property="filePath" column="file_path" />
		<result property="fileName" column="file_name" />
		<result property="createDate" column="create_date" />
		<result property="createDate" column="modify_date" />
	</resultMap>
	
	<select id="getNoticeList"  parameterType="map" resultMap="bbsNotice">
		SELECT
			idx,
			title,
			create_date
		FROM bbs_notice
		ORDER BY idx desc
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<select id="getNoticeListbyId" resultMap="bbsNotice">
		SELECT
			idx,
			title,
			description,
			create_date
		FROM bbs_notice
		WHERE idx = #{idx}
		ORDER BY idx desc
	</select>
	
	<!-- <insert id="insertNotice">
		INSERT INTO bbs_notice (title, content, create_date) VALUES(#{title}, #{content}, now())
		RETURNING fid
		
	</insert> -->
	
	<insert id="insertNotice" parameterType="map">
		INSERT INTO bbs_notice(
			title, 
			description, 
			create_date,  
			modify_date 
		) VALUES (
			#{title}, 
			#{description}, 
			now(), 
			now()
		)
	</insert>

	<update id="modifyNotice" parameterType="map">
		UPDATE bbs_notice SET 
			title = #{title}, 
			description = #{description}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deleteNotice" parameterType="int">
		DELETE FROM bbs_notice
		WHERE idx = #{bbsNoticeId}
	</delete>
	
	
	<select id="getNoticeCnt" resultType="int">
		select count(*) from bbs_notice;  
	</select>
	
	<select id="getQnaList" parameterType="map" resultMap="bbsQuestion">
		SELECT
			T1.idx,
			T1.title,
			T1.user_id,
			T2.user_name as writer,
			T1.create_date,
			(
				SELECT 
					COUNT(idx) 
				FROM 
					bbs_qna_re 
				WHERE 
					qna_id = T1.idx
			) as comment_count
		FROM bbs_qna T1, users T2
		WHERE
			T1.user_id = T2.idx
		ORDER BY T1.idx desc
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<select id="getQnaListbyId" resultMap="bbsQuestion">
		SELECT
			idx,
			title,
			writer,
			description,
			create_date
		FROM bbs_qna
		WHERE idx = #{idx}
		ORDER BY idx desc
	</select>
	
	<!-- <insert id="insertNotice">
		INSERT INTO tb_kins_sys_notice (title, content, create_date) VALUES(#{title}, #{content}, now())
		RETURNING fid
		
	</insert> -->
	
	<insert id="insertQna" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('bbs_qna_idx_seq'::regclass)
		</selectKey>
		INSERT INTO bbs_qna(
			title, 
			description,
			user_id, 
			create_date,
			modify_date 
		) VALUES (
			#{title}, 
			#{description}, 
			#{userId}, 
			now(), 
			now()
		)
	</insert>

	<update id="modifyQna" parameterType="map">
		UPDATE bbs_qna SET 
			title = #{title}, 
			description = #{description}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deleteQna" parameterType="int">
		DELETE FROM bbs_qna
		WHERE idx = #{qnaId}
	</delete>
	
	<select id="getQnaCnt" resultType="int">
		select count(*) from bbs_qna;  
	</select>
	
	<select id="getFaqList" parameterType="map" resultMap="bbsFAQuestion">
		SELECT
			idx,
			title,
			description,
			writer,
			attach,
			create_date
		FROM bbs_faq
		ORDER BY idx desc
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<select id="getFaqListbyId" resultMap="bbsFAQuestion">
		SELECT
			idx,
			title,
			description
		FROM bbs_faq
		WHERE idx = #{idx}
		ORDER BY idx
	</select>
	
	<insert id="insertFaq" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('bbs_faq_idx_seq'::regclass)
		</selectKey>
		INSERT INTO bbs_faq(
			title, 
			description, 
			writer,
			attach,
			create_date,
			modify_date 
		) VALUES (
			#{title}, 
			#{description}, 
			#{writer}, 
			#{attach}, 
			now(), 
			now()
		)
	</insert>

	<update id="modifyFaq" parameterType="map">
		UPDATE bbs_faq SET 
			title = #{title}, 
			description = #{description}, 
			attach = #{attach}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deleteFaq" parameterType="int">
		DELETE FROM bbs_faq
		WHERE idx = #{faqId}
	</delete>
	
	<select id="getFaqCnt" resultType="int">
		select count(*) from bbs_faq;  
	</select>
	
	<select id="getReListbyIdx" resultMap="bbsReply">
		SELECT
			idx,
			qna_id,
			description,
			writer,
			create_date
		FROM bbs_qna_re
		WHERE idx = #{idx}
		ORDER BY idx desc
	</select>
	
	<select id="getReListbyQnaId" resultMap="bbsReply">
		SELECT
			T1.idx,
			T1.qna_id,
			T1.description,
			T2.user_name as writer,
			T1.create_date
		FROM bbs_qna_re T1, users T2
		WHERE 
			T1.qna_id = #{qnaId}
			AND T1.user_id = T2.idx
		ORDER BY idx desc
	</select>
	
	<select id="getRebyIdx" resultMap="bbsReply">
		SELECT
			idx,
			writer
		FROM bbs_qna_re
		WHERE idx = #{idx}
		ORDER BY idx
	</select>
	
	<insert id="insertRe" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('bbs_qna_re_idx_seq'::regclass)
		</selectKey>
		INSERT INTO bbs_qna_re(
			qna_id, 
			description, 
			user_id,
			create_date,
			modify_date 
		) VALUES (
			#{qnaId}, 
			#{description}, 
			#{userId}, 
			now(), 
			now()
		)
	</insert>
	
	<update id="modifyRe" parameterType="map">
		UPDATE bbs_qna_re SET 
			description = #{description}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deleteRe" parameterType="int">
		DELETE FROM bbs_qna_re
		WHERE idx = #{idx}
	</delete>
	
	<select id="getPdsList"  parameterType="map" resultMap="bbsPds">
		SELECT
			idx,
			title,
			create_date
		FROM bbs_pds
		ORDER BY idx desc
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<select id="getPdsbyId" parameterType="map" resultMap="bbsPds">
		SELECT
			idx,
			title,
			description,
			create_date
		FROM bbs_pds
		WHERE idx = #{idx}
		ORDER BY idx
	</select>
	
	<insert id="insertPds" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('bbs_pds_idx_seq'::regclass)
		</selectKey>
		INSERT INTO bbs_pds(
			idx,
			title, 
			description, 
			create_date,  
			modify_date 
		) VALUES (
			#{idx},
			#{title}, 
			#{description}, 
			now(), 
			now()
		)
	</insert>

	<update id="modifyPds" parameterType="map">
		UPDATE bbs_pds SET 
			title = #{title}, 
			description = #{description}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deletePds" parameterType="int">
		DELETE FROM bbs_pds
		WHERE idx = #{pdsId}
	</delete>
	
	<select id="getPdsCnt" resultType="int">
		select count(*) from bbs_pds;  
	</select>
	
	<select id="getPdsFileList"  parameterType="map" resultMap="bbsPdsFile">
		SELECT
			idx,
			pds_id,
			file_path,
			file_name,
			create_date,
			modify_date
		FROM bbs_pds_attach
		WHERE pds_id = #{pdsId}
		ORDER BY idx desc
	</select>
	
	<select id="getPdsFilebyId" parameterType="map" resultMap="bbsPdsFile">
		SELECT
			idx,
			pds_id,
			file_path,
			file_name,
			create_date,
			modify_date
		FROM bbs_pds_attach
		WHERE idx = #{idx}
	</select>
	
	<insert id="insertPdsFile" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('bbs_pds_attach_idx_seq'::regclass)
		</selectKey>
		INSERT INTO bbs_pds_attach(
			idx,
			pds_id,
			file_path,
			file_name,
			create_date,
			modify_date
		) VALUES (
			#{idx},
			#{pdsId}, 
			#{filePath}, 
			#{fileName}, 
			now(), 
			now()
		)
	</insert>

	<update id="modifyPdsFile" parameterType="map">
		UPDATE bbs_pds_attach SET 
			file_path = #{filePath}, 
			file_name = #{fileName}, 
			modify_date = now() 
		WHERE idx = #{idx}
	</update>
	
	<delete id="deletePdsFile" parameterType="int">
		DELETE FROM bbs_pds_attach
		WHERE pds_id = #{value}
	</delete>
</mapper>