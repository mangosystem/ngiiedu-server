<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.go.ngii.edu.main.courses.course.mapper.CourseMapper">

	<resultMap type="kr.go.ngii.edu.main.courses.course.model.Course" id="courseMap">
		<id property="idx" column="idx" />
		<result property="moduleId" column="module_id" />
		<result property="courseName" column="course_name" />
		<result property="courseMetadata" column="course_metadata" />
		<result property="courseCreateId" column="course_create_id" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
		<result property="status" column="status" />
		<result property="projectId" column="project_id" />
	</resultMap>
	
	<resultMap type="kr.go.ngii.edu.main.courses.course.model.CourseInfo" id="courseInfoMap">
		<id property="idx" column="idx" />
		<result property="moduleId" column="module_id" />
		<result property="moduleName" column="module_name" />
		<result property="moduleMetadata" column="module_metadata" />
		<result property="courseName" column="course_name" />
		<result property="courseMetadata" column="course_metadata" />
		<result property="courseCreateId" column="course_create_id" />
		<result property="courseCreateUserId" column="course_create_userid" />
		<result property="userDivision" column="user_division" />
		<result property="createDate" column="create_date" />
		<result property="modifyDate" column="modify_date" />
		<result property="userId" column="user_id" />
		<result property="status" column="status" />
		<result property="projectId" column="project_id" />
	</resultMap>
	
	<!-- 사용자별 내가 만든 수업목록 -->
	<select id="listOwn" parameterType="map" resultMap="courseMap">
		SELECT
			idx,
			module_id,
			course_name,
			course_metadata,
			course_create_id,
			create_date,
			modify_date,
			status,
			project_id
		FROM courses
		WHERE 
			course_create_id = #{value}
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<!-- 사용자별 내가 참여하는 수업목록 -->
	<select id="listJoin" parameterType="map" resultMap="courseMap">
		SELECT
			idx,
			module_id,
			course_name,
			course_metadata,
			course_create_id,
			create_date,
			modify_date,
			status,
			project_id
		FROM courses
		WHERE 
			course_create_id = #{value}
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<!-- 전체수업 목록 -->
	<select id="list" parameterType="map" resultMap="courseMap">
		SELECT
			idx,
			module_id,
			course_name,
			course_metadata,
			course_create_id,
			create_date,
			modify_date,
			status,
			project_id
		FROM courses
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<!-- 전체수업 목록 -->
	<select id="courseInfoList" parameterType="map" resultMap="courseInfoMap">
		SELECT 
			idx, 
			module_id, 
			module_name, 
			module_metadata, 
			course_name, 
			course_metadata,
       		course_create_id, 
       		userid as course_create_userid, 
       		user_division, 
       		create_date, 
       		modify_date,
			project_id
  		FROM public.courses_infos
  		<where>
  			<if test="keyword != '' and keyword != null">
				module_name like #{keyword} or 
				course_name like #{keyword} or
				userid like #{keyword}
			</if>
			<if test="keyword != '' and keyword != null">
				module_name like #{keyword} or 
				course_name like #{keyword} or
				userid like #{keyword}
			</if>
		</where>
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<!-- 교사(자신)가 생성한 수업목록 -->
	<select id="courseInfoListOwn" parameterType="map" resultMap="courseInfoMap">
		SELECT 
			idx, 
			module_id, 
			module_name, 
			module_metadata, 
			course_name, 
			course_metadata,
       		course_create_id, 
       		userid as course_create_userid, 
       		user_division, 
       		create_date, 
       		modify_date,
			project_id
  		FROM public.courses_infos
  		<where>
  			user_id = ${userId}
			<if test="keyword != '' and keyword != null">
				module_name like #{keyword} or 
				course_name like #{keyword} or
				userid like #{keyword}
			</if>
		</where>
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>
	
	<!-- 참여한 수업목록 -->
	<select id="courseInfoListJoin" parameterType="map" resultMap="courseInfoMap">
		SELECT
		    courses_infos.idx,
		    courses_infos.module_id,
		    courses_infos.module_name,
		    courses_infos.module_metadata,
		    courses_infos.course_name,
		    courses_infos.course_metadata,
		    courses_infos.course_create_id,
		    courses_infos.userid as course_create_userid,
		    courses_infos.user_division,
		    courses_infos.create_date,
		    courses_infos.modify_date,
		    courses_member.user_id,
		    courses_member.join_status as status,
			courses_infos.project_id
		FROM courses_infos courses_infos left join courses_member courses_member
		    ON courses_infos.idx = courses_member.course_id
		WHERE courses_member.user_id = ${userId}
			
		<if test="keyword != '' and keyword != null">
				and (
				module_name like #{keyword} or 
				course_name like #{keyword} or
				userid like #{keyword} )
			</if>
		<if test="offset != null and limit != null">
			OFFSET ${offset} LIMIT ${limit}
		</if>
	</select>

	<select id="get" parameterType="map" resultMap="courseMap">
		SELECT
			idx,
			module_id,
			course_name,
			course_metadata,
			course_create_id,
			create_date,
			modify_date,
			status,
			project_id
		FROM courses
		WHERE idx = #{idx}
	</select>
	
	<!-- 수업 추가하기 -->
	<insert id="create" parameterType="map">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT nextval('courses_idx_seq'::regclass)
		</selectKey>
		INSERT INTO courses (
			idx,
			module_id,
			course_name,
			course_metadata,
			course_create_id,
			create_date,
			modify_date,
			status,
			project_id
		) VALUES (
			#{idx},
			#{moduleId},
			#{courseName},
			#{courseMetadata},
			#{courseCreateId},
			#{createDate},
			#{modifyDate},
			#{status},
			#{projectId}
		)
	</insert>
	
	<update id="modify" parameterType="map">
		UPDATE courses
		<set>
			<if test="courseName !=null">
				course_name = #{courseName},
			</if>
			<if test="courseMetadata !=null">
				course_metadata = #{courseMetadata},
			</if>
			<if test="status !=null">
				status = #{status},
			</if>
			modify_date = #{modifyDate} 
		</set>
		WHERE idx = #{idx}
	</update>
	
	<delete id="delete" parameterType="map">
		DELETE FROM courses
		WHERE idx = #{idx}
	</delete>

</mapper>
